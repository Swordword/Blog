{"pageProps":{"postData":{"id":"读书笔记 深入理解计算机系统 计算机系统漫游","contentHtml":"<h2 id=\"user-content-信息就是位和上下文\"><a href=\"#%E4%BF%A1%E6%81%AF%E5%B0%B1%E6%98%AF%E4%BD%8D%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>信息就是位和上下文</h2>\n<pre><code><span>#<span>include</span> <span>&#x3C;stdio.h></span></span>\n<span>int</span> <span>main</span><span>()</span>\n{\n  <span>printf</span>(<span>\"hello world\\n\"</span>);\n}</code></pre>\n<p>一个 hello.c 文件，本质是由0和1组成的位（或称为比特）序列，8个位被组成一组，称为字节。每个字节表示程序的某些文本字符《应该是某个吧？》</p>\n<p>现代计算机系统都使用ASCII 标准表示文本字符。比如常见的换行符<code>\\n</code>对应 ASCII 码为10, 空格键对应的 ASCII 码为32。像 hello.c 这样只由 ASCII 字符构成的文件称为<strong>文本文件</strong>，所有其他文件都称为<strong>二进制文件</strong>《那图片也是二进制文件嘛？-- 是的》</p>\n<p>系统中所有的信息--包括磁盘文件，内存中的数据，内存中存放的用户数据以及网络上传用的数据，都是由<strong>一串比特</strong>表示的。区分不同数据对象的唯一方法是我们访问这些数据对象的上下文，在不同的上下文下，同样的字节序列表示的内容可能不同</p>\n<p>数字的机器表示方式与实际的整数和实数都是不同的，是对真值的有限近似值</p>\n<p>C 语言成功的原因</p>\n<ul>\n<li>C 语言与 Unix 操作系统关系密切</li>\n<li>C 语言小而简单</li>\n<li>C 语言是为实践目的设计的：为了实现Unix操作系统</li>\n</ul>\n<h2 id=\"user-content-程序被其他的程序翻译成不同的格式\"><a href=\"#%E7%A8%8B%E5%BA%8F%E8%A2%AB%E5%85%B6%E4%BB%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%BF%BB%E8%AF%91%E6%88%90%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>程序被其他的程序翻译成不同的格式</h2>\n<p>为了在系统运行 hello.c 程序，每条 C 语句都必须被其他程序转化为一系列的<strong>低级机器语言</strong>指令，这些指令按照一种称为<strong>可执行目标程序</strong>的格式打好包，存为二进制磁盘文件，目标程序也称为<strong>可执行目标文件</strong></p>\n<p><code>gcc -o hello hello.c</code></p>\n<p>GCC 编译器驱动程序读取源程序文件 hello.c, 并把它翻译成可执行文件 hello。这个过程就叫编译系统，分为四个阶段：预处理器、编译器、汇编器、链接器</p>\n<ul>\n<li>预处理阶段。预处理器修改原始的 C 程序，比如将语言的系统头文件直接插入程序文本中，得到 hello.i</li>\n<li>编译阶段。编译器将 hello.i 翻译成文本文件 hello.s, 它是一个汇编语言程序。汇编语言为不同语言的不同编译器提供了通用的输出语句《所以 C 的编译器和 Rust 的编译器编译出的汇编程序是一样的？》</li>\n<li>汇编阶段。汇编器将 hello.s 翻译成机器语言指令，将指令打包成<strong>可重定位目标程序的格式</strong>， 并将其保存在文件hello.o，是一个二进制文件。</li>\n<li>链接阶段。hello 程序调用了<code>printf</code>函数，<code>printf</code>函数存在于一个名为<code>printf.o</code>的单独的预编译好的目标文件中，《和预处理差不多，只不过是插入全局编译的头文件？》。链接器就是将目标文件合并到我们的hello.o中，得到<strong>可执行目标文件</strong>hello，可以被加载到内存中，由系统执行。</li>\n</ul>\n<h2 id=\"user-content-处理器读并解释储存在内存中的指令\"><a href=\"#%E5%A4%84%E7%90%86%E5%99%A8%E8%AF%BB%E5%B9%B6%E8%A7%A3%E9%87%8A%E5%82%A8%E5%AD%98%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%8C%87%E4%BB%A4\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>处理器读并解释储存在内存中的指令</h2>\n<p>为了了解运行可执行文件 hello 时究竟发生了什么，需要了解一个典型系统的硬件系统</p>\n<h3 id=\"user-content-系统的硬件组成\"><a href=\"#%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>系统的硬件组成</h3>\n<p>总线、I/O设备、主存、处理器等</p>\n<h4 id=\"user-content-总线\"><a href=\"#%E6%80%BB%E7%BA%BF\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>总线</h4>\n<ul>\n<li>贯穿整个系统的一组电子管道，称为总线。</li>\n<li>携带信息字节并负责在各个部件间传递。</li>\n<li>被设计成传送定长的字节块，也就是字，《4个字节 = 32位。 8个字节 = 64位》</li>\n</ul>\n<h4 id=\"user-content-io设备\"><a href=\"#io%E8%AE%BE%E5%A4%87\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>I/O设备</h4>\n<ul>\n<li>I/O（输入输出）设备是系统与外部世界的联系通道，</li>\n<li>每个 I/O 设备都通过一个控制器或适配器与 I/O 总线相连。控制器与适配器的区别主要在于它们的封装方式。<strong>控制器</strong>是 I/O 设备本身或者系统主印制电路板（主板）上的芯片组，而<strong>适配器</strong>则是一块插在主板插槽上的卡。二者功能都是在 I/O 总线和 I/O 设备上传递信息</li>\n</ul>\n<h4 id=\"user-content-主存\"><a href=\"#%E4%B8%BB%E5%AD%98\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>主存</h4>\n<ul>\n<li>临时存储设备。处理器执行程序时，用来存放程序和程序处理的数据</li>\n<li>物理上来说，由一组动态随机存取存储器（DRAM）芯片组成</li>\n<li>逻辑上来说，存储器是一个线性的字节数组，每个字节都有唯一的地址（数组索引）</li>\n</ul>\n<h4 id=\"user-content-处理器\"><a href=\"#%E5%A4%84%E7%90%86%E5%99%A8\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>处理器</h4>\n<ul>\n<li>中央处理器，解释（或执行）存储在主存中指令的引擎</li>\n<li>核心是大小为一个字的存储设备（或寄存器），称为程序计数器（PC）。PC都指向主存中的某条机器语言指令</li>\n<li>处理器持续不断地执行程序计数器指向的机器指令，再更新程序计数器，使其指向下一条指令</li>\n<li>处理器看上去是按照一个非常简单的指令执行模型来操作的，这个模型是由指令集架构决定的。模型中执行一条指令包含执行一系列的步骤：\n<ul>\n<li>处理器从程序计数器指向的内存处读取指令</li>\n<li>解释指令的位，执行该指令指示的简单操作</li>\n<li>更新 PC，使其指向下一条指令</li>\n</ul>\n</li>\n<li>执行指令围绕着主存、寄存器文件（register file）和算术/逻辑单元（ALU）来进行。寄存器文件是一个小的存储设备，由一些单个字长的寄存器组成，每个寄存器都有唯一的名字。ALU 计算新的数据和地址值。《寄存器是干嘛用的？》</li>\n<li>CPU 在指令的要求下可能会执行以下操作\n<ul>\n<li>加载：从主存复制一个字节或者一个字到寄存器，覆盖寄存器原先的内容</li>\n<li>存储：从寄存器复制一个字节或者一个字到主存中的某个位置，已覆盖这个位置上原来的内容</li>\n<li>操作：把两个寄存器的内容复制到ALU，ALU对这两个字做算术运算，并将结果放到一个寄存器中，已覆盖该寄存器中原先的内容</li>\n<li>跳转：从指令本身中抽取一个字，并将这个字复制到程序计数器（PC）中，已覆盖PC中原来的值</li>\n</ul>\n</li>\n<li>处理器的的<strong>指令集架构</strong>描述每条机器代码指令的效果。处理器的微体系架构描述的是处理器实际上的实现</li>\n</ul>\n<h3 id=\"user-content-运行-hello-程序\"><a href=\"#%E8%BF%90%E8%A1%8C-hello-%E7%A8%8B%E5%BA%8F\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>运行 hello 程序</h3>\n<ol>\n<li>\n<p>键盘输入 hello 时，shell 程序将字符逐一读入寄存器，再把它存放在内存中</p>\n</li>\n<li>\n<p>回车时，shell 执行一系列指令加载可执行的 <code>hello</code> 文件，这些指令将 <code>hello</code> 目标文件中的代码和数据从磁盘复制到主存。数据包括最终会被输出的字符串 <code>\"hello,world\\n\"</code></p>\n<p>利用直接存储器存取（DMA）技术，数据可以不通过处理器而直接从磁盘到达主存</p>\n</li>\n<li>\n<p>一旦目标文件 <code>hello</code> 中的代码和数据被加载到主存，处理器就开始执行 <code>hello</code> 程序的 <code>main</code>程序 中的机器语言指令。这些指令将 <code>\"hello, world\\n\"</code>字符串中的字节从主存复制到寄存器文件，再从寄存器文件中复制到显示设备，最终显示在屏幕上</p>\n</li>\n</ol>\n<h2 id=\"user-content-高速缓存至关重要\"><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E8%87%B3%E5%85%B3%E9%87%8D%E8%A6%81\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>高速缓存至关重要</h2>\n<p>系统花费大量时间将信息从一个地方挪到另一个地方，《加载：磁盘->主存；运行：主存->处理器》</p>\n<p>存储器层次结构的主要思想是上一层的存储器作为低一层存储器的高速缓存。</p>\n<h2 id=\"user-content-操作系统管理硬件\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E7%A1%AC%E4%BB%B6\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>操作系统管理硬件</h2>\n<p>抽象概念：进程、虚拟内存、文件</p>\n<p>[未完待续...]</p>\n","title":"读书笔记 深入理解计算机系统 计算机系统漫游","date":"2021-07-03T19:11:01.000Z","category":"category","tag":null,"cover":null,"description":"description"}},"__N_SSG":true}