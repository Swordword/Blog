{"pageProps":{"postData":{"id":"前端 模块化RequireJS和SystemJS比较","contentHtml":"<p>公司微前端方案已经从RequireJS转向SystemJS了，为了理清迁移的优势，整理一下二者的区别与联系</p>\n<h2 id=\"user-content-requirejs\"><a href=\"#requirejs\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>RequireJS</h2>\n<p>RequireJS 是一个js文件，也是一个模块打包器，脱胎于CommonJS。在ESM还没有出现的年代，致力于使得各个js文件脱离全局变量进行模块化。</p>\n<h3 id=\"user-content-安装与引用\"><a href=\"#%E5%AE%89%E8%A3%85%E4%B8%8E%E5%BC%95%E7%94%A8\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>安装与引用</h3>\n<p><a href=\"https://requirejs.org/docs/download.html\">官网下载 requireJS文件</a>,作为脚本引入，</p>\n<pre><code> <span>&#x3C;!-- data-main 属性表明在 require.js 加载完成之后加载 scripts/main.js --></span>\n <span>&#x3C;<span>script</span> <span>data-main</span>=<span>\"scripts/main\"</span> <span>src</span>=<span>\"scripts/require.js\"</span>></span><span>&#x3C;/<span>script</span>></span></code></pre>\n<h3 id=\"user-content-使用\"><a href=\"#%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>使用</h3>\n<h5 id=\"user-content-baseurl\"><a href=\"#baseurl\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>baseUrl</h5>\n<p>RequireJS 相对于 baseUrl 加载 js 文件，baseUrl 默认设置为 data-main 制定的入口文件所在的目录，也可以通过 RequireJS config 设置 baseUrl。</p>\n<pre><code>requirejs.<span>config</span>({\n  <span>// 默认加载模块，以 js/lib 作为加载根目录</span>\n  <span>baseUrl</span>: <span>'js/lib'</span>,\n  <span>// 如果遇到 app 开头的require，路径为'js/lib/../app/'</span>\n  <span>paths</span>: {\n      <span>app</span>: <span>'../app'</span>\n  }\n})\n<span>// 'jquery', 'canvas' 在 js/lib 中，app/sub 在 js/app 中</span>\nrequirejs([<span>'jquery'</span>, <span>'canvas'</span>, <span>'app/sub'</span>],<span>function</span>(<span>$,canvas,sub</span>) {\n});</code></pre>\n<h5 id=\"user-content-定义模块\"><a href=\"#%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>定义模块</h5>\n<p>在 js 文件中通过 define 来定义可以导出的对象，供其他模块requreJS导入</p>\n<blockquote>\n<p>define(<em>name</em>?, <em>deps</em>?, <em>callback</em>) {}</p>\n</blockquote>\n<ul>\n<li>\n<p>定义导出简单的key/value 对象</p>\n<pre><code><span>define</span>({\n    <span>color</span>: <span>\"black\"</span>,\n    <span>size</span>: <span>\"unisize\"</span>\n})</code></pre>\n</li>\n<li>\n<p>定义方法导出数据</p>\n<pre><code><span>define</span>(<span>function</span> (<span></span>) {\n    <span>//做一些准备工作</span>\n    <span>return</span> {\n        <span>color</span>: <span>\"black\"</span>,\n        <span>size</span>: <span>\"unisize\"</span>\n    }\n});</code></pre>\n</li>\n<li>\n<p>定义依赖于其他模块的导出方法</p>\n<pre><code><span>// 1个依赖和本文件是在一个文件夹中，my 开头的依赖默认情况下是在本文件的兄弟文件夹 my 中</span>\n<span>define</span>([<span>\"./cart\"</span>, <span>\"my/inventory\"</span>], <span>function</span>(<span>cart, inventory</span>) {\n        <span>return</span> {\n            <span>color</span>: <span>\"blue\"</span>,\n            <span>size</span>: <span>\"large\"</span>,\n            <span>addToCart</span>: <span>function</span>(<span></span>) {\n                inventory.<span>decrement</span>(<span>this</span>);\n                cart.<span>add</span>(<span>this</span>);\n            }\n        }\n    }\n);</code></pre>\n</li>\n<li>\n<p>将模块定义为方法</p>\n<pre><code><span>define</span>([<span>\"my/cart\"</span>, <span>\"my/inventory\"</span>],\n    <span>function</span>(<span>cart, inventory</span>) {\n        <span>return</span> <span>function</span>(<span>title</span>) {\n            <span>return</span> title ? (<span>window</span>.<span>title</span> = title) :\n                   inventory.<span>storeName</span> + <span>' '</span> + cart.<span>name</span>;\n        }\n    }\n);</code></pre>\n</li>\n<li>\n<p>定义一个具名模块</p>\n<pre><code><span>// 模块名称是 foo/title</span>\n<span>define</span>(<span>\"foo/title\"</span>,\n        [<span>\"my/cart\"</span>, <span>\"my/inventory\"</span>],\n        <span>function</span>(<span>cart, inventory</span>) {\n       }\n    );</code></pre>\n</li>\n</ul>\n<h5 id=\"user-content-引用模块\"><a href=\"#%E5%BC%95%E7%94%A8%E6%A8%A1%E5%9D%97\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>引用模块</h5>\n<pre><code><span>require</span>([], <span>function</span>(<span>module1,module2</span>){\n  \n})</code></pre>\n<h5 id=\"user-content-\"></h5>\n<h3 id=\"user-content-code\"><a href=\"#code\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>Code</h3>\n<h4 id=\"user-content--1\"><a href=\"#-1\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a></h4>\n<p>[未完待续...]</p>\n","title":"前端 模块化RequireJS和SystemJS比较","date":"2021-08-23T14:10:54.000Z","category":"FE","tag":null,"cover":null,"description":"description"}},"__N_SSG":true}