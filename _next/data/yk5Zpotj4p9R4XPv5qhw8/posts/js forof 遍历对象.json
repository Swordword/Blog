{"pageProps":{"postData":{"id":"js forof 遍历对象","contentHtml":"<p>数组使用 <code>for、forEach、every、some</code>都是通过数组下标遍历属性，ES6 <code>for...of</code>可以直接通过迭代器遍历数组的值。</p>\n<p><code>for...of</code> 内部创建一个循环用于遍历可迭代对象（包括:内置的<code>string</code>、<code>array</code>、类数组对象(例如函数参数<code>arguments</code>或节点<code>nodeList</code>)、<code>TypedArray</code>、<code>Map</code>、<code>Set</code>和用户定义的迭代对象）。它调用一个定制的迭代钩子，其中包含针对对象的每个不同属性的值执行的语句</p>\n<h3 id=\"user-content-数组为何可以使用forof遍历\"><a href=\"#%E6%95%B0%E7%BB%84%E4%B8%BA%E4%BD%95%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8forof%E9%81%8D%E5%8E%86\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>数组为何可以使用<code>for...of</code>遍历</h3>\n<p>for...of语法适用于遍历定义了迭代器的对象，而数组刚好有内置的<code>@@iterator</code>,因此可以直接应用。</p>\n<pre><code><span>var</span> arr = [<span>1</span>, <span>2</span>, <span>3</span>];\n<span>var</span> it = arr[<span>Symbol</span>.<span>iterator</span>]()\n\n<span>console</span>.<span>log</span>(it.<span>next</span>()) <span>// {value:1,done:false}</span>\n<span>console</span>.<span>log</span>(it.<span>next</span>()) <span>// {value:2,done:false}</span>\n<span>console</span>.<span>log</span>(it.<span>next</span>()) <span>// {value:3,done:false}</span>\n<span>console</span>.<span>log</span>(it.<span>next</span>()) <span>// {value:undefined,done:true}</span></code></pre>\n<p>符号<code>Symbol.iterator</code>获取对象的<code>@@iterator</code>内部属性。引用类似iterator的特殊属性时要使用符号名，而不是符号代表的值。(?) <code>@@iterator</code>其实并不是一个迭代器对象，而是一个返回迭代器对象的函数</p>\n<h3 id=\"user-content-迭代协议iteration-protocols\"><a href=\"#%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AEiteration-protocols\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>迭代协议（Iteration protocols）</h3>\n<h3 id=\"user-content-给普通的对象定义iterator迭代器\"><a href=\"#%E7%BB%99%E6%99%AE%E9%80%9A%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AE%9A%E4%B9%89iterator%E8%BF%AD%E4%BB%A3%E5%99%A8\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>给普通的对象定义<code>@@iterator</code>迭代器</h3>\n<p>比如一个普通的obj对象，含有a、b两个属性。为该对象定义一个<code>Symbol.iterator</code>迭代器属性，即可使用for-of 遍历</p>\n<pre><code><span>var</span> myObject = {\n  <span>a</span>: <span>2</span>,\n  <span>b</span>: <span>3</span>,\n};\n<span>Object</span>.<span>defineProperty</span>(myObject, <span>Symbol</span>.<span>iterator</span>, {\n  <span>enumerable</span>: <span>true</span>,\n  <span>writable</span>: <span>false</span>,\n  <span>configurable</span>: <span>true</span>,\n  <span>value</span>: <span>function</span> (<span></span>) {\n    <span>var</span> o = <span>this</span>;\n    <span>var</span> idx = <span>0</span>;\n    <span>var</span> ks = <span>Object</span>.<span>keys</span>(o);\n    <span>return</span> {\n      <span>next</span>: <span>function</span> (<span></span>) {\n        <span>return</span> {\n          <span>value</span>: o[ks[idx++]],\n          <span>done</span>: idx > ks.<span>length</span>,\n        };\n      },\n    };\n  },\n});</code></pre>\n","title":"JS forof 遍历数组的原理","date":"2020-10-10T23:17:42.000Z","description":"阐述 forof 遍历数组的原理，并由此介绍 ES6 引入的迭代协议","tag":"javascript"}},"__N_SSG":true}