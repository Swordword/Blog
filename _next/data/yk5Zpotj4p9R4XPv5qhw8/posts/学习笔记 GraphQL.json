{"pageProps":{"postData":{"id":"学习笔记 GraphQL","contentHtml":"<p>操作类型 Operation Type：</p>\n<ul>\n<li>query 查询：</li>\n<li>mutation 变更：</li>\n<li>substription 订阅：</li>\n</ul>\n<p>对象类型与标量类型</p>\n<p>GraphQL 查询会同等看待单个项目或者一个列表的项目,查询一个字段结果有可能是一项或者一个数组</p>\n<h4 id=\"user-content-查询与变更\"><a href=\"#%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%8F%98%E6%9B%B4\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>查询与变更</h4>\n<p>约定变更服务端数据通过 <code>mutation</code>语句表示</p>\n<pre><code><span>mutation</span> CreateReviewForEpisode<span>(</span><span>$ep</span>: Episode<span>!</span>, <span>$review</span>: ReviewInput<span>!</span><span>)</span> <span>{</span>\n  createReview<span>(</span><span>episode</span><span>:</span> <span>$ep</span>, <span>review</span><span>:</span> <span>$review</span>) <span>{</span>\n    stars\n    commentary\n  <span>}</span>\n<span>}</span>\n<span>{</span>\n  <span>\"ep\"</span><span>:</span> <span>\"JEDI\"</span>,\n  <span>\"review\"</span><span>:</span> <span>{</span>\n    <span>\"stars\"</span><span>:</span> <span>5</span>,\n    <span>\"commentary\"</span><span>:</span> <span>\"This is a great movie!\"</span>\n  <span>}</span>\n<span>}</span></code></pre>\n<p><strong>查询字段时，是并行执行，而变更字段时，是线性执行，一个接着一个。</strong></p>\n<h4 id=\"user-content-内联片段-inline-fragments\"><a href=\"#%E5%86%85%E8%81%94%E7%89%87%E6%AE%B5-inline-fragments\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>内联片段 Inline Fragments</h4>\n<p>如果查询的子弹返回的是接口或者联合类型，需要使用<strong>内联片段</strong>取出下层具体类型的数据</p>\n<pre><code>query HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Human {\n      height\n    }\n  }\n}\n{\n  \"ep\": \"JEDI\"\n}\n</code></pre>\n<p>返回的hero 只有是Droid类型时会有promaryFunction字段，只有是Human字段时会有height字段</p>\n<h4 id=\"user-content-元字段-meta-fields\"><a href=\"#%E5%85%83%E5%AD%97%E6%AE%B5-meta-fields\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>元字段 Meta fields</h4>\n<p>元字段中的 __typename可以放置在查询的任何位置上，获取该位置对象的类型名称</p>\n<pre><code>{\n  search(text: \"an\") {\n    __typename\n    ... on Human {\n      name\n    }\n    ... on Droid {\n      name\n    }\n    ... on Starship {\n      name\n    }\n  }\n}\n# res:\n{\n  \"data\": {\n    \"search\": [\n      {\n        \"__typename\": \"Human\",\n        \"name\": \"Han Solo\"\n      },\n      {\n        \"__typename\": \"Human\",\n        \"name\": \"Leia Organa\"\n      },\n      {\n        \"__typename\": \"Starship\",\n        \"name\": \"TIE Advanced x1\"\n      }\n    ]\n  }\n}\n</code></pre>\n<h3 id=\"user-content-schema-与类型\"><a href=\"#schema-%E4%B8%8E%E7%B1%BB%E5%9E%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>Schema 与类型</h3>\n<h4 id=\"user-content-对象类型与字段\"><a href=\"#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AD%97%E6%AE%B5\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>对象类型与字段</h4>\n<pre><code><span>type</span> Character <span>{</span>\n  <span>name</span><span>:</span> String<span>!</span>\n  <span>appearsIn</span><span>:</span> <span>[</span>Episode<span>!</span><span>]</span><span>!</span>\n<span>}</span></code></pre>\n<p>Character 是 GraphQL对象类型，</p>\n<p>[未完待续...]</p>\n","title":"GraphQl探秘","date":"2022-01-10T23:46:37.000Z","category":"category","tag":"sql,","cover":null,"description":"Facebook 推出的新一代查询接口"}},"__N_SSG":true}