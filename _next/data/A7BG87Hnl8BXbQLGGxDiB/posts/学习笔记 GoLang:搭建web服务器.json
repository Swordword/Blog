{"pageProps":{"postData":{"id":"学习笔记 GoLang:搭建web服务器","contentHtml":"<h3 id=\"user-content-设想\"><a href=\"#%E8%AE%BE%E6%83%B3\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>设想</h3>\n<p>设计两个关于唱片接口</p>\n<p><code>/albums</code> get请求返回唱片合集，post请求会根据传入的信息新建唱片</p>\n<p><code>/albums/:id</code>根据传入的id返回该唱片的信息</p>\n<h3 id=\"user-content-code\"><a href=\"#code\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>Code</h3>\n<h4 id=\"user-content-获取所有唱片\"><a href=\"#%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%94%B1%E7%89%87\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>获取所有唱片</h4>\n<p>首先找一个合适的目录，新建一个文件夹<code>web-service-gin</code>, 控制台进入该文件夹， <code>go mod init</code> 初始化包：</p>\n<p><code>$ go mod init example/web-service-gin</code></p>\n<p>在该文件夹下创建 main.go 文件作为我们 RESTful 程序的入口</p>\n<pre><code><span>package</span> main\n...</code></pre>\n<p>首先定义需要返回的数据格式与mock数据</p>\n<pre><code><span>type</span> album <span>struct</span> {\n    ID     <span>string</span>  <span>`json:\"id\"`</span>\n    Title  <span>string</span>  <span>`json:\"title\"`</span>\n    Artist <span>string</span>  <span>`json:\"artist\"`</span>\n    Price  <span>float64</span> <span>`json:\"price\"`</span>\n}\t\t\n<span>var</span> albums = []album{\n    {ID: <span>\"1\"</span>, Title: <span>\"Blue Train\"</span>, Artist: <span>\"John Coltrane\"</span>, Price: <span>56.99</span>},\n    {ID: <span>\"2\"</span>, Title: <span>\"Jeru\"</span>, Artist: <span>\"Gerry Mulligan\"</span>, Price: <span>17.99</span>},\n    {ID: <span>\"3\"</span>, Title: <span>\"Sarah Vaughan and Clifford Brown\"</span>, Artist: <span>\"Sarah Vaughan\"</span>, Price: <span>39.99</span>},\n}</code></pre>\n<p>定义一个方法，相当于控制器，用来返回所有mock的唱片信息</p>\n<pre><code><span>// getAlbums 以 JSON 的形式返回所有的albums信息</span>\n<span><span>func</span> <span>getAlbums</span><span>(c *gin.Context)</span></span> {\n    c.IndentedJSON(http.StatusOK, albums)\n}</code></pre>\n<blockquote>\n<p>gin.Context 用来接收http request 的入参信息等</p>\n</blockquote>\n<p>声明main函数，在main函数里面根据请求的路由走不同的控制器</p>\n<pre><code><span><span>func</span> <span>main</span><span>()</span></span> {\n\trouter := gin.Default()\n\trouter.GET(<span>\"/albums\"</span>, getAlbums)\n\trouter.Run(<span>\"localhost:8080\"</span>)\n}</code></pre>\n<p>需要引用自带的<code>http</code> 模块和<code>github.com/gin-gonic/gin</code>模块 ，完整代码如下：</p>\n<pre><code><span>package</span> main\n\n<span>import</span> (\n\t<span>\"net/http\"</span>\n\n\t<span>\"github.com/gin-gonic/gin\"</span>\n)\n\n<span>type</span> album <span>struct</span> {\n\tID     <span>string</span>  <span>`json:\"id\"`</span>\n\tTitle  <span>string</span>  <span>`json:\"title\"`</span>\n\tArtist <span>string</span>  <span>`json:\"artist\"`</span>\n\tPrice  <span>float64</span> <span>`json:\"price\"`</span>\n}\n\n<span>var</span> albums = []album{\n\t{ID: <span>\"1\"</span>, Title: <span>\"Blue Train\"</span>, Artist: <span>\"John Coltrane\"</span>, Price: <span>56.99</span>},\n\t{ID: <span>\"2\"</span>, Title: <span>\"Jeru\"</span>, Artist: <span>\"Gerry Mulligan\"</span>, Price: <span>17.99</span>},\n\t{ID: <span>\"3\"</span>, Title: <span>\"Sarah Vaughan and Clifford Brown\"</span>, Artist: <span>\"Sarah Vaughan\"</span>, Price: <span>39.99</span>},\n}\n\n<span><span>func</span> <span>getAlbums</span><span>(c *gin.Context)</span></span> {\n\tc.IndentedJSON(http.StatusOK, albums)\n}\n\n<span><span>func</span> <span>main</span><span>()</span></span> {\n\trouter := gin.Default()\n\trouter.GET(<span>\"/albums\"</span>, getAlbums)\n\trouter.Run(<span>\"localhost:8080\"</span>)\n}</code></pre>\n<p>使用<code>go get</code>将 gin 作为依赖项安装</p>\n<blockquote>\n<p>go get 会从GitHub上安装gin包，需要注意网络</p>\n</blockquote>\n<p>在 项目文件夹<code>web-service-gin</code>下，执行代码：<code>go run .</code>，浏览器打开<code>[localhost:8080/albums](http://localhost:8080/albums)</code>会看到返回的 albums json 信息</p>\n<h4 id=\"user-content-添加唱片\"><a href=\"#%E6%B7%BB%E5%8A%A0%E5%94%B1%E7%89%87\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>添加唱片</h4>\n<p>目的：当通过post方法请求/albums时，在原有的mock数据基础上添加新唱片</p>\n<p>首先创建<code>postAlbum</code>方法处理post请求的信息</p>\n<pre><code><span><span>func</span> <span>postAlbum</span><span>(c *gin.Context)</span></span> {\n\t<span>var</span> newAlbum album\n\t<span>if</span> err := c.BindJSON(&#x26;newAlbum); err != <span>nil</span> {\n\t\t<span>return</span>\n\t}\n\talbums = <span>append</span>(albums, newAlbum)\n\tc.IndentedJSON(http.StatusCreated, newAlbum)\n}</code></pre>\n<blockquote>\n<p>c.BindJSON(&#x26; newAlbum) 方法会将请求体的数据赋予 newAlbum</p>\n</blockquote>\n<p>在 mian 方法里添加对 /albums post 方法的处理:</p>\n<pre><code><span><span>func</span> <span>main</span><span>()</span></span> {\n    router := gin.Default()\n    router.GET(<span>\"/albums\"</span>, getAlbums)\n    router.POST(<span>\"/albums\"</span>, postAlbums)\n    router.Run(<span>\"localhost:8080\"</span>)\n}</code></pre>\n<p>重启一下 go 服务<code>go run .</code></p>\n<p>通过 curl 执行post请求</p>\n<pre><code>$ curl http://localhost:8080/albums \\\n    --include \\\n    --header <span>\"Content-Type: application/json\"</span> \\\n    --request <span>\"POST\"</span> \\\n    --data <span>'{\"id\": \"4\",\"title\": \"The Modern Sound of Betty Carter\",\"artist\": \"Betty Carter\",\"price\": 49.99}'</span></code></pre>\n<p>成功后在浏览器打开 <code>http://localhost:8080/albums</code>会发现唱片集数量增加到了4个，表明我们新建唱片成功了</p>\n<h4 id=\"user-content-获取单个唱片的信息\"><a href=\"#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E5%94%B1%E7%89%87%E7%9A%84%E4%BF%A1%E6%81%AF\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>获取单个唱片的信息</h4>\n<p>同样的，先创建一个方法来根据id获取唱片信息</p>\n<pre><code><span><span>func</span> <span>getAlbumByID</span><span>(c *gin.Context)</span></span> {\n\tid := c.Param(<span>\"id\"</span>)\n\t<span>for</span> _, a := <span>range</span> albums {\n\t\t<span>if</span> a.ID == id {\n\t\t\tc.IndentedJSON(http.StatusOK, a)\n\t\t\t<span>return</span>\n\t\t}\n\t}\n\tc.IndentedJSON(http.StatusNotFound, gin.H{<span>\"message\"</span>: <span>\"album not found\"</span>})\n}</code></pre>\n<blockquote>\n<p>c.Param(\"id\") 即 gin.Context.Param(\"id\") 会获得请求URL的路径参数id， go是真方便呐！</p>\n<p>一个 for 循环找到 id相同的唱片并返回，没有的话返回404</p>\n</blockquote>\n<p>在main方法里面监听 <code>/albums/:id</code></p>\n<pre><code><span><span>func</span> <span>main</span><span>()</span></span> {\n\trouter := gin.Default()\n\trouter.GET(<span>\"/albums\"</span>, getAlbums)\n\trouter.GET(<span>\"/albums/:id\"</span>, getAlbumByID)\n\trouter.POST(<span>\"/albums\"</span>, postAlbum)\n\trouter.Run(<span>\"localhost:8080\"</span>)\n}</code></pre>\n<p>重启项目<code>go run .</code>，在浏览打开http://localhost:8080/albums/2会看到id为2 的唱片信息</p>\n<p>将路径换成http://localhost:8080/albums/4，会发现结果为404，因为之前通过post添加的唱片信息在项目重启时已经清空了，可以再执行一边上面的curl语句，就可以开到id为4 的唱片信息了</p>\n<p>完整代码如下</p>\n<pre><code><span>package</span> main\n\n<span>import</span> (\n\t<span>\"net/http\"</span>\n\n\t<span>\"github.com/gin-gonic/gin\"</span>\n)\n\n<span>type</span> album <span>struct</span> {\n\tID     <span>string</span>  <span>`json:\"id\"`</span>\n\tTitle  <span>string</span>  <span>`json:\"title\"`</span>\n\tArtist <span>string</span>  <span>`json:\"artist\"`</span>\n\tPrice  <span>float64</span> <span>`json:\"price\"`</span>\n}\n\n<span>var</span> albums = []album{\n\t{ID: <span>\"1\"</span>, Title: <span>\"Blue Train\"</span>, Artist: <span>\"John Coltrane\"</span>, Price: <span>56.99</span>},\n\t{ID: <span>\"2\"</span>, Title: <span>\"Jeru\"</span>, Artist: <span>\"Gerry Mulligan\"</span>, Price: <span>17.99</span>},\n\t{ID: <span>\"3\"</span>, Title: <span>\"Sarah Vaughan and Clifford Brown\"</span>, Artist: <span>\"Sarah Vaughan\"</span>, Price: <span>39.99</span>},\n}\n\n<span><span>func</span> <span>getAlbums</span><span>(c *gin.Context)</span></span> {\n\tc.IndentedJSON(http.StatusOK, albums)\n}\n\n<span><span>func</span> <span>postAlbum</span><span>(c *gin.Context)</span></span> {\n\t<span>var</span> newAlbum album\n\t<span>if</span> err := c.BindJSON(&#x26;newAlbum); err != <span>nil</span> {\n\t\t<span>return</span>\n\t}\n\talbums = <span>append</span>(albums, newAlbum)\n\tc.IndentedJSON(http.StatusCreated, newAlbum)\n}\n\n<span><span>func</span> <span>getAlbumByID</span><span>(c *gin.Context)</span></span> {\n\tid := c.Param(<span>\"id\"</span>)\n\t<span>for</span> _, a := <span>range</span> albums {\n\t\t<span>if</span> a.ID == id {\n\t\t\tc.IndentedJSON(http.StatusOK, a)\n\t\t\t<span>return</span>\n\t\t}\n\t}\n\tc.IndentedJSON(http.StatusNotFound, gin.H{<span>\"message\"</span>: <span>\"album not found\"</span>})\n}\n\n<span><span>func</span> <span>main</span><span>()</span></span> {\n\trouter := gin.Default()\n\trouter.GET(<span>\"/albums\"</span>, getAlbums)\n\trouter.GET(<span>\"/albums/:id\"</span>, getAlbumByID)\n\trouter.POST(<span>\"/albums\"</span>, postAlbum)\n\trouter.Run(<span>\"localhost:8080\"</span>)\n}</code></pre>\n","title":"学习笔记 GoLang:搭建Web服务器","date":"2021-09-18T02:46:55.000Z","category":"category","tag":null,"cover":null,"description":"使用 go 和 gin 开发 restful API"}},"__N_SSG":true}