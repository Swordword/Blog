{"pageProps":{"postData":{"id":"学习笔记 CSS 动画的基本使用","contentHtml":"<h2 id=\"user-content-背景\"><a href=\"#%E8%83%8C%E6%99%AF\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>背景</h2>\n<p>随着互联网的发展，网页已经不仅仅起到展示信息的作用，更可以带给观众愉悦感</p>\n<p>CSS动画主要分为两类：过渡transition 和 动画animation。这两者也可以协同合作达到更好的效果</p>\n<h2 id=\"user-content-css-过渡-transition\"><a href=\"#css-%E8%BF%87%E6%B8%A1-transition\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>CSS 过渡 transition</h2>\n<p>定义某一个属性，以及如何动态的表示其变化，浏览器会自动的绘制出响应的过渡动画</p>\n<p>CSS提供了1个属性表示需要过渡的DOM属性，和3个表示如何过渡的属性，这4个属性完整描述一个过渡。</p>\n<p>每次设置一个过渡都需要些4个属性太麻烦，CSS可以快捷设置一个过渡，如果在一个class上需要添加多个过渡，可以通过 , 分隔。不能定义多个<code>transition</code>(后者会覆盖前者)</p>\n<p><code>transition: property duration timing-function delay , property duration... </code></p>\n<h3 id=\"user-content-transition-property\"><a href=\"#transition-property\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>transition-property</code></h3>\n<p>需要设置动画的属性，如height、transform等。默认情况下表示dom的所有可过渡属性。</p>\n<p>不是dom上所有的属性都是可过渡的(animatable)，具体参见<a href=\"http://www.w3.org/TR/css3-transitions/#animatable-properties-\">W3C</a></p>\n<h3 id=\"user-content-transition-duration\"><a href=\"#transition-duration\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>transition-duration</code></h3>\n<p>动画持续的时间 , 单位为 s 或者 ms。比如<code>2s</code>表示动画会在2s运行完成</p>\n<h3 id=\"user-content-transition-delay\"><a href=\"#transition-delay\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>transition-delay</code></h3>\n<p>动画开始前的延迟时间。可以为一个负值，比如是<code>-1s</code>的话动画的开始状态为完整动画已经运行1s时的状态。</p>\n<h3 id=\"user-content-transition-timing-function\"><a href=\"#transition-timing-function\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>transition-timing-function</code></h3>\n<p>顾名思义，是一个时间函数，描述动画在duration上的每个时间的分布。默认值为<code>ease</code>, 通俗的说就是动画是怎么动的，匀速还是越来越快？</p>\n<h4 id=\"user-content-timing-function属性\"><a href=\"#timing-function%E5%B1%9E%E6%80%A7\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>timing-function</code>属性</h4>\n<p>时间函数属性有两种：贝塞尔曲线或者跃迁函数</p>\n<h5 id=\"user-content-贝塞尔曲线\"><a href=\"#%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>贝塞尔曲线</h5>\n<p>贝塞尔曲线的控制点由4个控制点组成，其中第一个点是(0,0)表示开始时刻,最后一个点为(1,1)表示结束时刻,中间的点，x必须位于0-1之间（表示一段贝塞尔曲线的某一时间）,y可以是任意值。</p>\n<p>由于只需要设置中间两个点。CSS中设置贝塞尔曲线的语法是<code>cubic-bezier(x2,y2,x3,y3)</code>，可以在线配置中间两个点查看生成的<a href=\"https://cubic-bezier.com/\">贝塞尔曲线</a>。</p>\n<p>动画在每一刻的快慢是由贝塞尔曲线的切线斜率决定的。斜率越大动画运行的就越快，反之越慢</p>\n<p>CSS提供了几条内置的贝塞尔曲线 <code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code> 和 <code>ease-in-out</code>。<code>linear</code>就是匀速运动，其贝塞尔曲线为 <code>cubic-bezier(0,0,1,1)</code></p>\n<p><img src=\"http://img.massivejohn.com/image-20210526154934598.png\" alt=\"image-20210526154934598\"></p>\n<h5 id=\"user-content-跃迁函数steps\"><a href=\"#%E8%B7%83%E8%BF%81%E5%87%BD%E6%95%B0steps\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>跃迁函数（Steps）</h5>\n<p>跃迁函数可以将一段完整的动画分成一帧一帧展示，是一种自己实现动画的方式。暂且不表</p>\n<h3 id=\"user-content-transition-events\"><a href=\"#transition-events\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>transition events</h3>\n<h4 id=\"user-content-transitionend\"><a href=\"#transitionend\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>transitionend</h4>\n<p>CSS transition 结束时会触发该事件</p>\n<h3 id=\"user-content-动画与displaynone-冲突的解决办法\"><a href=\"#%E5%8A%A8%E7%94%BB%E4%B8%8Edisplaynone-%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>动画与<code>display:none</code> 冲突的解决办法</h3>\n<p>如果css 中对一个设置<code>display:none</code>的元素切换至<code>display:block</code>，该元素会直接展示在动画结束的位置，元素上的动画并不会生效。</p>\n<p>css在设置<code>display:none</code>和 <code>display:block</code>时浏览器会重绘，这个是一个异步事件，在此期间浏览器无法</p>\n<h2 id=\"user-content-css动画-animation\"><a href=\"#css%E5%8A%A8%E7%94%BB-animation\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>CSS动画 animation</h2>\n<p>transition 虽然可以实现基础的动画效果，但是我们不能具体控制具体某个时间节点的显示状态， CSS <code>animation </code>却可以做到。</p>\n<p>CSS 动画 也可以叫做关键帧动画。因为它的实现效果基本上是由关键帧实现的。</p>\n<p>我们知道计算机上所有运动的东西其实都是由一段段连续的图片播放形成的，这些图片就叫做帧，设置关键帧使得计算机可以根我们定义的帧计算出其余的帧从而形成流畅动画</p>\n<p>CSS可以通过<code>@keyframes</code>定义关键帧</p>\n<pre><code><span>@keyframes</span> rotateFrames{  \n  <span>from</span>{    \n    <span>transform</span>: <span>rotate</span>(<span>0deg</span>);  \n  }  \n  <span>to</span>{    \n    <span>transform</span>: <span>rotate</span>(<span>360deg</span>);  \n  }\n}</code></pre>\n<p>CSS animation 的属性比 transition更多，有8个属性。也可以简写为一行CSS</p>\n<p><code>animation: name duration timing-function delay iteration-count direction fill-mode;</code></p>\n<p>其中，<code>animation-duration</code>、<code>animation-delay</code>、<code>animation-timing-function</code>与 <code>transition</code>属性相同</p>\n<h3 id=\"user-content-animation-name\"><a href=\"#animation-name\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animation-name</code></h3>\n<p>关键帧的名称, 比如上面代码中的<code>rotateFrame</code></p>\n<h3 id=\"user-content-animation-iteration-count\"><a href=\"#animation-iteration-count\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animation-iteration-count</code></h3>\n<p>动画的播放次数，默认是1，设置为 <code>infinite</code> 表示无限循环播放</p>\n<h3 id=\"user-content-animation-direction\"><a href=\"#animation-direction\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animation-direction</code></h3>\n<p>指定动画播放的方向，默认是<code>normal</code>：每个动画结束，动画重置到起点</p>\n<p><code>reverse</code>: 反转播放，从100% 到 0%</p>\n<p><code>alternate</code>: 正反转轮流播放，奇数次为 0% 到 100%，偶数次为 100% 到 0%；</p>\n<p><code>alternate-reverse</code>: 与<code>alternate</code>相反</p>\n<h3 id=\"user-content-animation-fill-mode\"><a href=\"#animation-fill-mode\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animation-fill-mode</code></h3>\n<p>指定动画填充模式，描述动画开始或结束时，元素处于什么状态。默认是<code>none</code></p>\n<ul>\n<li><code>none</code> : 默认行为</li>\n<li><code>forwards</code>: 动画完成后，保持关键帧中最后一帧的状态</li>\n<li><code>backwards</code>: 在<code>animation-delay</code>指定动画延迟的一段时间内，元素保持为第一帧中的状态（也就是第一帧中所定义的状态）</li>\n<li><code>both</code>: 上面两种模式都被应用</li>\n</ul>\n<p><code>both</code>和<code>forwards</code>的区别主要是当<code>animation-delay</code>存在时，动画未开始时元素的位置，<code>both</code>时元素的位置处于关键帧的第一帧，<code>forwards</code>元素的位置属于CSS起始位置</p>\n<pre><code><span>@keyframes</span> move {\n  <span>from</span> {\n    <span>transform</span>: <span>translateX</span>(<span>50px</span>);\n  }\n  <span>to</span> {\n    <span>transform</span>: <span>translateX</span>(<span>150px</span>);\n  }\n}\n<span>.ball-1</span>,\n<span>.ball-2</span>,\n<span>.ball-3</span> {\n  <span>width</span>: <span>20px</span>;\n  <span>height</span>: <span>20px</span>;\n  <span>border-radius</span>: <span>50%</span>;\n  <span>animation-name</span>: move;\n  <span>animation-duration</span>: <span>2s</span>;\n  <span>animation-delay</span>: <span>1s</span>;\n}\n\n<span>.ball-1</span> {\n  <span>background-color</span>: red;\n  <span>animation-fill-mode</span>: both;\n}\n\n<span>.ball-2</span> {\n  <span>background-color</span>: yellow;\n  <span>animation-fill-mode</span>: forwards;\n}\n\n<span>.ball-3</span> {\n  <span>background-color</span>: blue;\n  <span>animation-fill-mode</span>: backwards;\n}\n</code></pre>\n<p><img src=\"http://img.massivejohn.com/demo.gif\" alt=\"demo\"></p>\n<h3 id=\"user-content-animation-play-state\"><a href=\"#animation-play-state\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animation-play-state</code></h3>\n<p>指定动画播放状态，正在运行还是暂停, 默认是running</p>\n<h3 id=\"user-content-animation-events\"><a href=\"#animation-events\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>animation Events</h3>\n<h4 id=\"user-content-animationstart\"><a href=\"#animationstart\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animationstart</code></h4>\n<p>动画开始时触发此事件</p>\n<h4 id=\"user-content-animationend\"><a href=\"#animationend\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animationend</code></h4>\n<p>动画结束时触发事件</p>\n<h4 id=\"user-content-animationiteration\"><a href=\"#animationiteration\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a><code>animationiteration</code></h4>\n<p>当一个动画循环结束，另一个动画事件开始时触发，不会和<code>animationstart</code>与<code>animationend</code>重叠。如果 <code>iteration-count</code>为1的话不触发此事件</p>\n<h2 id=\"user-content-参考\"><a href=\"#%E5%8F%82%E8%80%83\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>参考</h2>\n<p><a href=\"https://zh.javascript.info/css-animations\">CSS 动画 (javascript.info)</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html\">CSS动画简介 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">使用 CSS 动画 - CSS（层叠样式表） | MDN (mozilla.org)</a></p>\n<p><a href=\"https://juejin.cn/post/6844903845470945294\">掘金 (juejin.cn)</a></p>\n","title":"CSS 动画的基本使用","date":"2021-05-21T11:41:27.000Z","category":"category","tag":"CSS","cover":null,"description":"CSS 动画可以在不借助 Javascript 的情况下做出一些简单的动画效果"}},"__N_SSG":true}