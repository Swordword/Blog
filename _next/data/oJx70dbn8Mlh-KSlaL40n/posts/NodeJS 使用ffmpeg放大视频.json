{"pageProps":{"postData":{"id":"NodeJS 使用ffmpeg放大视频","contentHtml":"<h4 id=\"user-content-问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>问题</h4>\n<p>最近接到一个需求，将几百个不到1mb的视频扩充到20m以上</p>\n<h4 id=\"user-content-处理\"><a href=\"#%E5%A4%84%E7%90%86\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>处理</h4>\n<p>视频处理只听说过<a>ffmpeg</a>,自然就使用了node包 <a href=\"https://github.com/fluent-ffmpeg/node-fluent-ffmpeg\">fluent-ffmpeg</a></p>\n<p><code>const ffmpeg = require('fluent-ffmpeg')</code></p>\n<p>首先想到的是修改视频的分辨率，之前的分辨率一直是 640, 但是通过一番查找发现视频的尺寸其实与分辨率并没有太大的关系。</p>\n<p>码率：数据传输时单位时间传送的数据位数，单位是 kbps 或 mbps</p>\n<p><strong>视频尺寸 = 码率 * 时长 / 8</strong></p>\n<p>视频的时长自然没法改变，所以可以通过添加视频的码率增加视频尺寸</p>\n<p>通过 ffmpeg 的 ffprobe 查询当前视频的码率是多少</p>\n<pre><code>ffmpeg.<span>ffprobe</span>(filePath, <span>(<span>err, data</span>) =></span> {\n      <span>console</span>.<span>log</span>(<span>'data'</span>, data.<span>format</span>.<span>bit_rate</span>,data.<span>format</span>.<span>size</span>)\n    })</code></pre>\n<p><img src=\"http://img.massivejohn.com/image-20210412162835650.png\" alt=\"image-20210412162835650\"></p>\n<p>可以得到一个测试视频的码率是 485935，大小大概 570k</p>\n<p>因为按照比例将码率扩大40倍，<code>ffmpeg(filePath).videoBitrate(40 * originBitrate)</code>发现视频尺寸并没有到达 20mb 以上。。。</p>\n<p>又将码率从 2 开始慢慢增加，发现当码率增加到一定的倍数后，视频尺寸与码率就不在按照正比例增加了。可能是因为视频的分辨率限制了码率的最大值，分辨率就只有640，码率增加过大也没有任何意义了。也可能 ffmpeg 内部对码率与分辨率做了限制。</p>\n<p>那就去修改分辨率吧，将分辨率设置为 1920 在将码率设置为 20 mbps，这样只要视频的长度大于 8</p>\n<p>s 时视频的尺寸就超过了20m</p>\n<pre><code>     <span>ffmpeg</span>(filePath)\n        .<span>videoBitrate</span>(<span>'20000k'</span>)\n        .<span>size</span>(<span>`1920x?`</span>)\n        .<span>save</span>(<span>`<span>${dir}</span>/<span>${name}</span>copy.mp4`</span>)\n        .<span>on</span>(<span>'end'</span>, <span>() =></span> {\n          <span>resolve</span>()\n        })\n        .<span>on</span>(<span>'error'</span>, <span>(<span>err</span>) =></span> {\n          <span>console</span>.<span>log</span>(<span>'err'</span>, err)\n          <span>reject</span>(<span>'error'</span>)\n        })</code></pre>\n<p>当然，最终也没有用到 ffprobe 读取的视频信息。</p>\n<p>查找过程中找了一些别的信息值得记录一下：</p>\n<p>分辨率：每一帧图像的大小，不同的分辨率要采用不同的位率</p>\n<p>帧率：FPS(Frames PerSecond) 每秒钟播放图片的帧数</p>\n<p>波特率：每秒传送的比特(bit)数，和码率看起来是一个东西。</p>\n<h4 id=\"user-content-结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>结论</h4>\n<p>视频尺寸是由码率和视频时长决定了，而码率的最大值是受视频的分辨率影响（或者只是在ffmpeg之中）</p>\n","title":"NodeJS 使用ffmpeg放大视频","date":"2021-04-12T13:43:19.000Z","description":"description","tag":"NodeJS"}},"__N_SSG":true}