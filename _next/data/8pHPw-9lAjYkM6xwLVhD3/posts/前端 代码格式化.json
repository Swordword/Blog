{"pageProps":{"postData":{"id":"前端 代码格式化","contentHtml":"<h3 id=\"user-content-前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>前言</h3>\n<p>虽然现在公司的前端只有我一个，但是前端项目该做的代码统一风格还是要做的 🌹🐔。本文尝试 使用husky+lint-staged在每次 <code>git commit</code> 时执行 <code>eslint --fix</code>格式化代码。</p>\n<h3 id=\"user-content-使用教程\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>使用教程</h3>\n<h4 id=\"user-content-husky\"><a href=\"#husky\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>husky</h4>\n<p>在你每次敲出<code>git commit</code>之后，你是不是常常会感到后悔？为了准时下班，涂涂改改的代码不加修饰就提到了公司git仓库上面，甚至包含一些冗余、错误(!)的代码。还好我现在只有一个人，拉的屎没人看得见，不然不得被同事打死。。。husky(哈士奇)，就像清理粪便的威猛先生，即使专门来解决这个问题的。它会在你<code>commit</code>之前，格式化你的代码呀，跑跑你写的单元测试呀，生成说明文档呀等等之类的。是将你的代码资产送至公有(公司拥有)前的最后一道锁。</p>\n<h5 id=\"user-content-安装update-现在-list-staged可以直接整合husky进行安装可以跳过husky的安装直接去list-staged\"><a href=\"#%E5%AE%89%E8%A3%85update-%E7%8E%B0%E5%9C%A8-list-staged%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E6%95%B4%E5%90%88husky%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E5%8F%AF%E4%BB%A5%E8%B7%B3%E8%BF%87husky%E7%9A%84%E5%AE%89%E8%A3%85%E7%9B%B4%E6%8E%A5%E5%8E%BBlist-staged\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>安装(update: 现在 list-staged可以直接整合husky进行安装，可以跳过husky的安装，直接去list-staged)</h5>\n<p><code>husky</code> 大概在 v4.0之后的安装和使用与之前有了天翻地覆的变化，之前只是使用过v1.x的版本，新的版本直接让我眼前一愣。。。</p>\n<p><code>husky</code>提供了一个<code>husky-init</code>的命令行工具帮助项目安装<code>husky</code>,</p>\n<pre><code>npx husky-init &#x26;&#x26; npm install       <span># npm</span>\nnpx husky-init &#x26;&#x26; yarn              <span># Yarn 1</span>\nyarn dlx husky-init --yarn2 &#x26;&#x26; yarn <span># Yarn 2</span></code></pre>\n<p>该<code>bash</code>会在当前项目安装<code>husky</code>,编辑<code>package.json</code>并且创建一个<code>.husky</code>文件夹，里面预置一个<code>pre-commit</code>钩子, 这个钩子会在 每次commit之前跑一遍<code>npx test</code>。如你所见，我们最后会在这里动文章。</p>\n<pre><code><span># .husky/pre-commit</span>\n<span>#!/bin/sh</span>\n. <span>\"<span>$(dirname <span>\"<span>$0</span>\"</span>)</span>/_/husky.sh\"</span>\nnpm <span>test</span></code></pre>\n<p>即在每次commit之前在这里运行格式化代码的脚本，在此之前，先来大致介绍一下格式化代码的工具<code>eslint</code></p>\n<h4 id=\"user-content-eslint\"><a href=\"#eslint\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>Eslint</h4>\n<p>eslint是一个工具，两个用途：代码格式化、检测代码常见语法错误。</p>\n<h5 id=\"user-content-安装\"><a href=\"#%E5%AE%89%E8%A3%85\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>安装</h5>\n<pre><code>npm install eslint --save-dev\t\t<span># npm</span>\nyarn add eslint --save-dev\t\t\t<span># yarn</span></code></pre>\n<p>执行<code>npx eslint --init</code>，会问你几个问题，按照实际项目的需求回答就可以，会生成一个<code>eslint</code>的配置文件。</p>\n<p><img src=\"http://img.massivejohn.com/image-20210518001736137.png\" alt=\"image-20210518001736137\"></p>\n<p>根据我的配置，会在项目的根文件夹创建一个<code>.eslintrc.json</code>文件。这个文件是用来配置eslint规则的一个入口（另一个是package.json文件中的eslintConfig字段，create-react-app的项目就是这样设计的。</p>\n<p>在<code>eslint.json</code>文件中，有两个字段<code>extends</code>和<code>rules</code>用来设置规则集合和自定义规则。</p>\n<p>执行 <code>npx eslint --fix . </code> 会检查<code>src</code>文件夹下的文件是不是有不符合规范的代码。</p>\n<p>有了<code>husky</code>和<code>eslint</code>，其实就可以做到在每次<code>commit</code>之前都跑一遍全局的<code>eslint --fix .</code>。然而如果随着你的代码堆积成山，就会发现每次commit都要等很久的时间。并且没有修改的代码为什么还要再格式化一遍呢？因此<code>lint-staged</code>应运而生.</p>\n<h4 id=\"user-content-lint-staged\"><a href=\"#lint-staged\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>lint-staged</h4>\n<p>每个人都喜欢统一格式的代码，在commit提交之前保证代码已经格式化尤为重要。所以我们需要在每次提交前都进行格式化，但是如果每次都格式化整个项目的话，速度很慢并且显得没有必要，有点像''你就是中国''的感觉。lint-staged 会在每次commit之前仅仅格式化待提交的代码。</p>\n<h5 id=\"user-content-安装-1\"><a href=\"#%E5%AE%89%E8%A3%85-1\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>安装</h5>\n<p>lint-staged 提供了一个 mrm工具 整合了<code>husky</code>、<code>lint-staged</code>和<code>eslint</code>等格式化工具。所以只要你在项目中安装问eslint之后，可以直接运行以下命令：</p>\n<pre><code>npx mrm@2 lint-staged &#x26;&#x26; npm install\t<span># npm</span>\nnpx mrm@2 lint-staged &#x26;&#x26; yarn\t\t\t<span># yarn</span></code></pre>\n<p><code>lint-staged</code>会直接完成对<code>.husky</code>文件夹下<code>pre-commit</code>脚本的的设置并且更新package.json文件中的<code>list-staged</code>字段</p>\n<pre><code><span># .husky/pre-commit</span>\n<span>#!/bin/sh</span>\n. <span>\"<span>$(dirname <span>\"<span>$0</span>\"</span>)</span>/_/husky.sh\"</span>\n\nnpx lint-staged</code></pre>\n<pre><code><span>\"lint-staged\"</span><span>:</span> <span>{</span>\n    <span>\"*.js\"</span><span>:</span> <span>\"eslint --cache --fix\"</span>\n<span>}</span>\n<span>// 给一个如果是typescript项目的配置</span>\n<span>\"lint-staged\"</span><span>:</span> <span>{</span>\n    <span>\"*.{js,jsx,ts,tsx}\"</span><span>:</span> <span>[</span>\n      <span>\"eslint --cache --fix\"</span>\n    <span>]</span>\n  <span>}</span><span>,</span></code></pre>\n<p>现在修改一下<code>src</code>文件夹里面的文件夹,故意编写一些错误代码:</p>\n<pre><code><span>function</span> <span>App</span>(<span></span>) {\n  <span>const</span> bb = <span>'hello'</span>\nbb = <span>111</span>\n  ...\n}</code></pre>\n<p>执行<code>git add .</code>，再执行<code>npx lint-staged</code>（注意，需要先使用lint-staged验证一下，不然就有可能直接commit上去了)</p>\n<p><img src=\"http://img.massivejohn.com/image-20210519011339005.png\" alt=\"image-20210519011339005\"></p>\n<p>大功告成！这样的话，每次你的代码在提交的时候都会自动检查一下是否符合规范。</p>\n<h3 id=\"user-content-总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>总结</h3>\n<p>前端代码规范主要是由三个方面组成, <code>husky</code>负责提供<code>git commit</code>的钩子、<code>Eslint</code>负责规范代码格式与质量，而<code>lint-staged</code>就是连接二者的桥梁。</p>\n","title":"前端代码格式化","date":"2021-05-17T18:13:02.000Z","category":"category","tag":"JavaScript,规范","cover":null,"description":"使用husky+lint-staged配合eslint在每次commit之前规范编码风格"}},"__N_SSG":true}