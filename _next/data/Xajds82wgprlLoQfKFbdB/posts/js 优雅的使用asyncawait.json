{"pageProps":{"postData":{"id":"js 优雅的使用asyncawait","contentHtml":"<h4 id=\"user-content-es7的asyncawait语法彻底消除了异步回调但是在错误处理上却带来了新的麻烦\"><a href=\"#es7%E7%9A%84asyncawait%E8%AF%AD%E6%B3%95%E5%BD%BB%E5%BA%95%E6%B6%88%E9%99%A4%E4%BA%86%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E4%BD%86%E6%98%AF%E5%9C%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8A%E5%8D%B4%E5%B8%A6%E6%9D%A5%E4%BA%86%E6%96%B0%E7%9A%84%E9%BA%BB%E7%83%A6\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>ES7的async、await语法彻底消除了异步回调，但是在错误处理上却带来了新的麻烦</h4>\n<p>常见的错误处理都是使用try catch语法，感觉相当麻烦。无意中发现有一个[封装函数](<a href=\"https://www.npmjs.com/package/await-to-js\">await-to-js - npm (npmjs.com)</a>)可以摆脱try catch的束缚</p>\n<pre><code><span>// to.js</span>\n<span>export</span> <span>default</span> <span>function</span> <span>to</span>(<span>promise</span>) {\n   <span>return</span> promise.<span>then</span>(<span><span>data</span> =></span> {\n      <span>return</span> [<span>null</span>, data];\n   })\n   .<span>catch</span>(<span><span>err</span> =></span> [err]);\n}\n<span>// task.js</span>\n<span>import</span> to <span>from</span> <span>'./to.js'</span>;\n\n<span>async</span> <span>function</span> <span>asyncTask</span>(<span></span>) {\n     <span>let</span> err, user, savedTask;\n\n     [err, user] = <span>await</span> <span>to</span>(<span>UserModel</span>.<span>findById</span>(<span>1</span>));\n     <span>if</span>(!user) <span>throw</span> <span>new</span> <span>CustomerError</span>(<span>'No user found'</span>);\n\n     [err, savedTask] = <span>await</span> <span>to</span>(<span>TaskModel</span>({<span>userId</span>: user.<span>id</span>, <span>name</span>: <span>'Demo Task'</span>}));\n     <span>if</span>(err) <span>throw</span> <span>new</span> <span>CustomError</span>(<span>'Error occurred while saving task'</span>);\n\n    <span>if</span>(user.<span>notificationsEnabled</span>) {\n       <span>const</span> [err] = <span>await</span> <span>to</span>(<span>NotificationService</span>.<span>sendNotification</span>(user.<span>id</span>, <span>'Task Created'</span>));  \n       <span>if</span> (err) <span>console</span>.<span>error</span>(<span>'Just log the error and continue flow'</span>);\n    }\n}</code></pre>\n","title":"优雅使用asyncawait","date":"2019-08-02T13:45:05.000Z","description":"ES7的async、await语法彻底消除了异步回调，但是在错误处理上却带来了新的问题。。","tag":"ES6、JavaScript"}},"__N_SSG":true}