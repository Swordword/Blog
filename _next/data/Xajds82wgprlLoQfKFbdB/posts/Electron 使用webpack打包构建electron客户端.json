{"pageProps":{"postData":{"id":"Electron 使用webpack打包构建electron客户端","contentHtml":"<h3 id=\"user-content-前导\"><a href=\"#%E5%89%8D%E5%AF%BC\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>前导</h3>\n<p>使用<code>electron</code> 可以方便打包跨平台的客户端软件，但是如何将前端工程化的优势与electron联系起来呢？</p>\n<p><a href=\"https://github.com/Swordword/electron-webpack-react-ts\">github electron-webpack-react-ts</a></p>\n<h3 id=\"user-content-目录结构\"><a href=\"#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>目录结构</h3>\n<p>创建空文件夹作为根目录，在根目录创建文件夹 app 和 .cli_build, 并在 app 中创建 main 和 renderer 文件夹分别存放 electron 主进程和渲染进程的代码, 文件夹 .cli_build 用于存放打包配置文件</p>\n<h2 id=\"user-content-脚手架搭建\"><a href=\"#%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>脚手架搭建</h2>\n<p>初始化项目<code>npm init -y</code> 或者<code>yarn init -y</code>，这里使用<code>yarn</code></p>\n<p>安装依赖项：注意，这里的 webpack 版本为5，</p>\n<p><code>yarn add webpack webpack-cli electron html-webpack-plugin webpack-dev-server  --dev</code></p>\n<h3 id=\"user-content-打包-main-主进程\"><a href=\"#%E6%89%93%E5%8C%85-main-%E4%B8%BB%E8%BF%9B%E7%A8%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>打包 main 主进程</h3>\n<p>app/main 文件夹下创建 index.js 作为 main 进程文件</p>\n<pre><code><span>// 目录：app/main/index.js</span>\n\n<span>import</span> { app, <span>BrowserWindow</span>, <span>Menu</span> } <span>from</span> <span>'electron'</span>\n\n<span>let</span> mainWindow\n\n<span>function</span> <span>createWindow</span>(<span></span>) {\n  <span>let</span> mainWindow = <span>new</span> <span>BrowserWindow</span>({\n    <span>width</span>: <span>1200</span>,\n    <span>height</span>: <span>800</span>,\n    <span>webPreferences</span>: {\n      <span>enableRemoteModule</span>: <span>true</span>,\n      <span>nodeIntegration</span>: <span>true</span>,\n    },\n  })\n\n  <span>const</span> isDev = process.<span>env</span>.<span>NODE_ENV</span> === <span>'development'</span>\n\n  <span>const</span> winURL = isDev\n  \t<span>//\t待会渲染进程打包时运行的端口</span>\n    ? <span>`http://localhost:8765`</span>\n    : <span>`file://<span>${__dirname}</span>/index.html`</span>\n\n  mainWindow.<span>loadURL</span>(winURL)\n  <span>if</span> (isDev) {\n    mainWindow.<span>webContents</span>.<span>openDevTools</span>()\n  }\n}\napp.<span>on</span>(<span>'window-all-closed'</span>, <span>() =></span> {\n  <span>if</span> (process.<span>platform</span> !== <span>'darwin'</span>) {\n    app.<span>quit</span>()\n  }\n})\napp.<span>on</span>(<span>'activate'</span>, <span>() =></span> {\n  <span>if</span> (mainWindow === <span>null</span>) {\n    <span>createWindow</span>()\n  }\n})\napp.<span>on</span>(<span>'ready'</span>, createWindow)</code></pre>\n<p><code>.cli_build</code>文件夹下创建<code>webpack.main.js</code>用于打包主进程文件。</p>\n<pre><code><span>// 目录：.cli_build/webpack.main.js</span>\n<span>// Native</span>\n<span>const</span> path = <span>require</span>(<span>'path'</span>)\n\n<span>const</span> <span>WebpackMainConfig</span> = {\n  <span>mode</span>: <span>'development'</span>,\n  <span>// mode: 'production',</span>\n  <span>entry</span>: {\n    <span>main</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'app/main/index.js'</span>),\n  },\n  <span>output</span>: {\n    <span>path</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'dist'</span>),\n    <span>filename</span>: <span>'main.js'</span>,\n  },\n  <span>target</span>: <span>'electron-main'</span>,\n}\n\n<span>module</span>.<span>exports</span> = <span>WebpackMainConfig</span>\n</code></pre>\n<p><code>package.json</code> 添加 <code>script</code>：<code>\"main\": \"webpack --config ./.cli_build/webpack.main.js\"</code></p>\n<p>执行 <code>yarn main</code> 会在<code>dist</code>文件夹下打包出一个<code>main.js</code>文件, 供之后使用</p>\n<h3 id=\"user-content-打包-renderer-渲染进程\"><a href=\"#%E6%89%93%E5%8C%85-renderer-%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>打包 renderer 渲染进程</h3>\n<p>类似的，在<code>app/renderer</code>文件夹下创建<code>index.js</code>和<code>index.html</code>作为渲染窗口</p>\n<pre><code><span>&#x3C;!-- 目录：app/renderer/index.js --></span>\nconsole.log('hello world')\n<span>&#x3C;!-- 目录：app/renderer/index.html --></span>\n<span>&#x3C;!DOCTYPE <span>html</span>></span>\n<span>&#x3C;<span>html</span> <span>lang</span>=<span>\"en\"</span>></span>\n  <span>&#x3C;<span>head</span>></span>\n    <span>&#x3C;<span>meta</span> <span>charset</span>=<span>\"UTF-8\"</span> /></span>\n    <span>&#x3C;<span>meta</span> <span>http-equiv</span>=<span>\"X-UA-Compatible\"</span> <span>content</span>=<span>\"IE=edge\"</span> /></span>\n    <span>&#x3C;<span>meta</span> <span>name</span>=<span>\"viewport\"</span> <span>content</span>=<span>\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span>&#x3C;<span>title</span>></span>Welcome to Electron<span>&#x3C;/<span>title</span>></span>\n  <span>&#x3C;/<span>head</span>></span>\n  <span>&#x3C;<span>body</span>></span>\n    <span>&#x3C;<span>p</span>></span>Hello World<span>&#x3C;/<span>p</span>></span>\n  <span>&#x3C;/<span>body</span>></span>\n<span>&#x3C;/<span>html</span>></span></code></pre>\n<p>在<code>.cli_build</code>文件夹创建<code>webpack.renderer.js</code>对渲染进程进行打包</p>\n<pre><code><span>// Native</span>\n<span>const</span> path = <span>require</span>(<span>'path'</span>)\n<span>// Package</span>\n<span>const</span> htmlWebpackPlugin = <span>require</span>(<span>'html-webpack-plugin'</span>)\n\n<span>const</span> <span>WebpackMainConfig</span> = {\n  <span>mode</span>: <span>'development'</span>,\n  <span>// mode: 'production',</span>\n  <span>entry</span>: {\n    <span>main</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'app/renderer/index.js'</span>),\n  },\n  <span>output</span>: {\n    <span>path</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'dist'</span>),\n    <span>filename</span>: <span>'[hash:name].js'</span>,\n  },\n  <span>devServer</span>: {\n    <span>contentBase</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'dist'</span>),\n    <span>compress</span>: <span>true</span>,\n    <span>port</span>: <span>8765</span>,\n  },\n  <span>plugins</span>: [\n    <span>new</span> <span>htmlWebpackPlugin</span>({\n      <span>template</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'app/renderer/index.html'</span>),\n    }),\n  ],\n}\n\n<span>module</span>.<span>exports</span> = <span>WebpackMainConfig</span>\n</code></pre>\n<p><code>package.json</code> 添加 <code>script</code>：<code>\"renderer\": \"webpack serve --config ./.cli_build/webpack.renderer.js\"</code>和 <code>\"start\":\"electron ./dist/main.js\"</code></p>\n<p>执行<code>yarn renderer</code>并新建控制台执行<code>yarn strat</code>可以看到运行出来的demo</p>\n<p>但是每次都得开两个控制台运行三次脚本，实在不方便。可以将其做到一个脚本文件中执行。</p>\n<p>在 <code>.cli_build</code>文件夹下创建<code>dev.js</code>，通过 Node 打包主进程与渲染进程并启动 electron</p>\n<pre><code><span>// 目录：.cli_build/dev.js</span>\n<span>// Native</span>\n<span>const</span> path = <span>require</span>(<span>'path'</span>)\n<span>const</span> { spawn } = <span>require</span>(<span>'child_process'</span>)\n\n<span>// Package</span>\n<span>const</span> electron = <span>require</span>(<span>'electron'</span>)\n<span>const</span> <span>Webpack</span> = <span>require</span>(<span>'webpack'</span>)\n<span>const</span> <span>WebpackDevServer</span> = <span>require</span>(<span>'webpack-dev-server'</span>)\n\n<span>const</span> mainConfig = <span>require</span>(<span>'./webpack.main'</span>)\n<span>const</span> rendererConfig = <span>require</span>(<span>'./webpack.renderer'</span>)\n\n<span>const</span> env = process.<span>env</span>.<span>NODE_ENV</span>\n<span>console</span>.<span>log</span>(<span>'env'</span>, env)\n\n<span>/**\n * main function\n *\n */</span>\n<span>function</span> <span>main</span>(<span></span>) {\n  <span>buildRenderer</span>()\n  <span>buildMain</span>().<span>then</span>(<span>() =></span> {\n    <span>launch</span>()\n  })\n}\n\n<span>/**\n * build main process\n */</span>\n<span>function</span> <span>buildMain</span>(<span></span>) {\n  <span>console</span>.<span>log</span>(<span>'fn buildMain'</span>)\n  <span>return</span> <span>new</span> <span>Promise</span>(<span>(<span>resolve</span>) =></span> {\n    mainConfig.<span>mode</span> = <span>'development'</span>\n    <span>const</span> compiler = <span>Webpack</span>(mainConfig)\n    compiler.<span>close</span>(<span>() =></span> {\n      <span>console</span>.<span>log</span>(<span>'buildMain resolve'</span>)\n      <span>resolve</span>()\n    })\n    compiler.<span>watch</span>({}, <span>(<span>err, stats</span>) =></span> {\n      <span>if</span> (err) {\n        <span>console</span>.<span>error</span>(err)\n        <span>return</span>\n      }\n    })\n  })\n}\n\n<span>/**\n * build renderer process\n */</span>\n<span>function</span> <span>buildRenderer</span>(<span></span>) {\n  <span>console</span>.<span>log</span>(<span>'fn buildRenderer'</span>)\n  rendererConfig.<span>mode</span> = <span>'development'</span>\n  <span>const</span> compiler = <span>Webpack</span>(rendererConfig)\n  <span>const</span> devServerOptions = <span>Object</span>.<span>assign</span>({}, rendererConfig.<span>devServer</span>, {\n    <span>contentBase</span>: path.<span>resolve</span>(__dirname, <span>'../dist'</span>),\n    <span>// open: true,</span>\n  })\n  <span>const</span> server = <span>new</span> <span>WebpackDevServer</span>(compiler, devServerOptions)\n  server.<span>listen</span>(<span>8765</span>, <span>() =></span> {\n    <span>console</span>.<span>log</span>(<span>'Starting server on http://localhost:8765'</span>)\n  })\n}\n\n<span>function</span> <span>launch</span>(<span></span>) {\n  <span>const</span> args = [path.<span>resolve</span>(process.<span>cwd</span>(), <span>'dist/main.js'</span>)]\n  <span>let</span> mainProcess = <span>spawn</span>(electron, args)\n  mainProcess.<span>on</span>(<span>'close'</span>, <span>() =></span> {\n    <span>// exit console</span>\n    process.<span>exit</span>()\n  })\n}\n\n<span>main</span>()\n</code></pre>\n<p><code>package.json</code> 添加 <code>script</code>：<code>\"dev\": \"node .cli_build/dev.js</code>，控制台执行<code>yarn dev</code></p>\n<h2 id=\"user-content-使用-react-和-typescript\"><a href=\"#%E4%BD%BF%E7%94%A8-react-%E5%92%8C-typescript\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>使用 React 和 Typescript</h2>\n<p>我们的<code>renderer</code>文件夹目前只是一个空落落的<code>hello world</code>，接下来将其替换为 React+Typescript示例</p>\n<h3 id=\"user-content-安装所需依赖\"><a href=\"#%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E4%BE%9D%E8%B5%96\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>安装所需依赖</h3>\n<p><code>yarn add react react-dom @types/react @types/react-dom typescript ts-loader --dev</code></p>\n<h3 id=\"user-content-升级主进程\"><a href=\"#%E5%8D%87%E7%BA%A7%E4%B8%BB%E8%BF%9B%E7%A8%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>升级主进程</h3>\n<p><code>app/main/index.js</code>=><code>app/main/index.ts</code></p>\n<pre><code><span>// 目录：app/main/index.ts</span>\n<span>// 添加一个类型说明就行</span>\n<span>let</span> <span>mainWindow</span>: <span>BrowserWindow</span></code></pre>\n<p>为<code>webpack.main.js</code>添加处理typescript文件的<code>module</code></p>\n<pre><code><span>// 目录 .cli_build/webpack.main.js</span>\n<span>entry</span>: {\n    <span>main</span>: path.<span>resolve</span>(process.<span>cwd</span>(), <span>'app/main/index.ts'</span>),\n  },\n<span>output</span>:...\n<span>module</span>: {\n    <span>rules</span>: [\n      {\n        <span>test</span>: <span>/\\/tsx?$/</span>,\n        <span>use</span>: <span>'ts-loader'</span>,\n        <span>exclude</span>: <span>/node_modules/</span>,\n      },\n    ],\n  },\n<span>plugins</span>:[...]</code></pre>\n<p>在项目根目录创建<code>tsconfig.json</code></p>\n<pre><code><span>{</span>\n  <span>\"compilerOptions\"</span><span>:</span> <span>{</span>\n    <span>\"baseUrl\"</span><span>:</span> <span>\".\"</span><span>,</span>\n    <span>\"sourceMap\"</span><span>:</span> <span><span>true</span></span><span>,</span>\n    <span>\"target\"</span><span>:</span> <span>\"ES5\"</span><span>,</span>\n    <span>\"module\"</span><span>:</span> <span>\"CommonJS\"</span><span>,</span>\n    <span>\"outDir\"</span><span>:</span> <span>\"./dist/ \"</span><span>,</span>\n    <span>// 设置jsx支持，待会渲染进程会使用到</span>\n    <span>\"jsx\"</span><span>:</span> <span>\"react\"</span><span>,</span>\n    <span>// 允许使用 import React from \"react\";</span>\n    <span>\"allowSyntheticDefaultImports\"</span><span>:</span> <span><span>true</span></span><span>,</span>\n    <span>// any类型警告</span>\n    <span>\"noImplicitAny\"</span><span>:</span> <span><span>true</span></span><span>,</span>\n    <span>\"noImplicitThis\"</span><span>:</span> <span><span>true</span></span><span>,</span>\n    <span>\"noImplicitReturns\"</span><span>:</span> <span><span>true</span></span><span>,</span>\n    <span>// 阻止 const enum 语法，babel 好像解析不了？</span>\n    <span>\"preserveConstEnums\"</span><span>:</span> <span><span>true</span></span><span>,</span>\n    <span>\"removeComments\"</span><span>:</span> <span><span>true</span></span>\n  <span>}</span><span>,</span>\n  <span>\"exclude\"</span><span>:</span> <span>[</span><span>\"node_modules\"</span><span>]</span>\n<span>}</span></code></pre>\n<h3 id=\"user-content-升级渲染进程\"><a href=\"#%E5%8D%87%E7%BA%A7%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>升级渲染进程</h3>\n<p>修改<code>renderer/index.js</code>为<code>renderer/index.tsx</code></p>\n<pre><code><span>// 目录 app/renderer/index.tsx</span>\n<span>import</span> * <span>as</span> <span>React</span> <span>from</span> <span>'react'</span>\n<span>import</span> * <span>as</span> <span>ReactDOM</span> <span>from</span> <span>'react-dom'</span>\n\n<span>const</span> <span>App</span> = (<span></span>) => {\n  <span>return</span> (\n    <span><span>&#x3C;<span>div</span>></span>\n      Hello World1122\n    <span>&#x3C;/<span>div</span>></span></span>\n  )\n}\n\n<span>ReactDOM</span>.<span>render</span>(<span><span>&#x3C;<span>App</span> /></span></span>, <span>document</span>.<span>getElementById</span>(<span>'app'</span>))</code></pre>\n<p><code>renderer/index.html</code>添加一个<code>&#x3C;div id='app' /></code>以供挂载</p>\n<p>更新 <code>.cli_build/webpack.renderer.js</code></p>\n<pre><code>  entry<span>:</span> <span>{</span>\n    main<span>:</span> path.resolve(__dirname<span>,</span> '../app/renderer/index.tsx')<span>,</span>\n  <span>}</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    <span>// 如果觉得和webpack.main.js重复的话，可以使用 webpack-merge 合并一下</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        test<span>:</span> /\\.tsx?$/<span>,</span>\n        use<span>:</span> 'ts-loader'<span>,</span>\n        exclude<span>:</span> /node_modules/<span>,</span>\n      <span>}</span><span>,</span>\n      <span>// webpack5 静态资源新的处理方法</span>\n       <span>{</span>\n        test<span>:</span> /\\.(png|jpg|jpeg)$/<span>,</span>\n        type<span>:</span> 'asset/resource'<span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n\tplugins<span>:</span> <span>[</span>...<span>]</span><span>,</span>\n\tresolve<span>:</span> <span>{</span>\n\t\t<span>// 支持无后缀引入ts文件 </span>\n    extensions<span>:</span> <span>[</span>'.ts'<span>,</span> '.tsx'<span>,</span> '.js'<span>]</span><span>,</span>\n\t\t<span>// 路径别名</span>\n    <span>// alias: {</span>\n    <span>//   '@': path.resolve(__dirname, '../src/renderer/'),</span>\n    <span>// },</span>\n  <span>}</span><span>,</span>\n</code></pre>\n<p>重新执行<code>yarn dev</code>,依然显示打包成功，剩下的单元测试，样式loader等配置就跟普通的React项目一样了</p>\n<h3 id=\"user-content-打包部署\"><a href=\"#%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2\" aria-hidden=\"true\" tabindex=\"-1\"><span></span></a>打包部署</h3>\n<p>使用 electron-builder 进行打包</p>\n<p><code>yarn add electron-builder --dev</code></p>\n<blockquote>\n<p>tips：如果在安装 electron 和 electron-builder 失败或者龟速，可以尝试使用淘宝镜像，在 baserc 或者 zshrc中添加</p>\n<p>export ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</p>\n<p>export ELECTRON_BUILDER_BINARIES_MIRROR=https://npm.taobao.org/mirrors/electron-builder-binaries/</p>\n<p>再进行安装</p>\n</blockquote>\n<p>在 .cli_build 文件夹中创建 build.js 打包两个进程</p>\n<pre><code><span>const</span> <span>Webpack</span> = <span>require</span>(<span>'webpack'</span>)\n\n<span>const</span> mainConfig = <span>require</span>(<span>'./webpack.main'</span>)\n<span>const</span> rendererConfig = <span>require</span>(<span>'./webpack.renderer'</span>)\n\n<span>const</span> env = <span>'production'</span>\n\n<span>function</span> <span>main</span>(<span></span>) {\n  <span>console</span>.<span>log</span>(<span>'fn main'</span>)\n  <span>Promise</span>.<span>all</span>([<span>buildMain</span>(), <span>buildRenderer</span>()]).<span>then</span>(<span>() =></span> {\n    <span>buildApp</span>()\n  })\n}\n\n<span>function</span> <span>buildMain</span>(<span></span>) {\n  <span>console</span>.<span>log</span>(<span>'fn buildMain'</span>)\n  mainConfig.<span>mode</span> = env\n  <span>return</span> <span>new</span> <span>Promise</span>(<span>(<span>resolve</span>) =></span> {\n    <span>const</span> compiler = <span>Webpack</span>(mainConfig)\n    compiler.<span>watch</span>({}, <span>(<span>err</span>) =></span> {\n      <span>if</span> (err) {\n        <span>console</span>.<span>error</span>(err)\n        <span>return</span>\n      }\n      <span>resolve</span>()\n    })\n  })\n}\n<span>function</span> <span>buildRenderer</span>(<span></span>) {\n  <span>console</span>.<span>log</span>(<span>'fn buildRenderer'</span>)\n  rendererConfig.<span>mode</span> = env\n  <span>return</span> <span>new</span> <span>Promise</span>(<span>(<span>resolve</span>) =></span> {\n    <span>const</span> compiler = <span>Webpack</span>(rendererConfig)\n    compiler.<span>watch</span>({}, <span>(<span>err</span>) =></span> {\n      <span>if</span> (err) {\n        <span>console</span>.<span>error</span>(err)\n        <span>return</span>\n      }\n      <span>resolve</span>()\n    })\n  })\n}\n<span>function</span> <span>buildApp</span>(<span></span>) {\n  <span>console</span>.<span>log</span>(<span>'starting build your app'</span>)\n  process.<span>exit</span>()\n}\n\n<span>main</span>()\n</code></pre>\n<p><code>package.json</code> 添加 <code>script</code>：<code>\"build\": \"node ./.cli_build/build.js &#x26;&#x26; electron-builder\"</code></p>\n<p>并添加用于 electron-builder 打包的配置</p>\n<pre><code><span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"dev\"</span><span>:</span> <span>\"node ./.cli_build/dev.js\"</span><span>,</span>\n    <span>\"build\"</span><span>:</span> <span>\"node ./.cli_build/build.js &#x26;&#x26; electron-builder\"</span><span>,</span>\n  \t<span>// 在mac中 打包windows项目</span>\n    <span>\"build:windows\"</span><span>:</span> <span>\"node ./.cli_build/build.js &#x26;&#x26; electron-builder --win --x64\"</span>\n  <span>}</span><span>,</span>\n  <span>\"build\"</span><span>:</span> <span>{</span>\n    <span>\"productName\"</span><span>:</span> <span>\"Your App Name\"</span><span>,</span>\n    <span>\"appId\"</span><span>:</span> <span>\"com.example.yourapp\"</span><span>,</span>\n    <span>\"directories\"</span><span>:</span> <span>{</span>\n      <span>\"output\"</span><span>:</span> <span>\"build\"</span>\n    <span>}</span><span>,</span>\n    <span>\"files\"</span><span>:</span> <span>[</span>\n      <span>\"dist/**/*\"</span>\n    <span>]</span><span>,</span>\n    <span>\"dmg\"</span><span>:</span> <span>{</span>\n      <span>\"contents\"</span><span>:</span> <span>[</span>\n        <span>{</span>\n          <span>\"x\"</span><span>:</span> <span>410</span><span>,</span>\n          <span>\"y\"</span><span>:</span> <span>150</span><span>,</span>\n          <span>\"type\"</span><span>:</span> <span>\"link\"</span><span>,</span>\n          <span>\"path\"</span><span>:</span> <span>\"/Applications\"</span>\n        <span>}</span><span>,</span>\n        <span>{</span>\n          <span>\"x\"</span><span>:</span> <span>130</span><span>,</span>\n          <span>\"y\"</span><span>:</span> <span>150</span><span>,</span>\n          <span>\"type\"</span><span>:</span> <span>\"file\"</span>\n        <span>}</span>\n      <span>]</span>\n    <span>}</span><span>,</span>\n    <span>// 可以在根目录添加 static 文件夹，里面放置各个端的icon</span>\n    <span>\"mac\"</span><span>:</span> <span>{</span>\n      <span>\"icon\"</span><span>:</span> <span>\"static/icon.icns\"</span>\n    <span>}</span><span>,</span>\n    <span>\"win\"</span><span>:</span> <span>{</span>\n      <span>\"icon\"</span><span>:</span> <span>\"static/icon.ico\"</span>\n    <span>}</span><span>,</span>\n    <span>\"linux\"</span><span>:</span> <span>{</span>\n      <span>\"icon\"</span><span>:</span> <span>\"static/icons\"</span>\n    <span>}</span>\n  <span>}</span><span>,</span></code></pre>\n<p>运行 <code>yarn build</code>会在<code>build</code>文件夹中查看打包后的软件</p>\n","title":"使用webpack打包构建electron客户端","date":"2021-01-19T16:42:36.000Z","category":"软件开发","tag":"electron,webpack,typescript,react","cover":"http://img.massivejohn.com/electron-cover%201.png","description":"使用webpack构建打包electron客户端，渲染进程使用React和Typescript."}},"__N_SSG":true}